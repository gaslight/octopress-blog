<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[The Gas Leak]]></title>
  <link href="http://gaslight.github.com/octopress-blog/atom.xml" rel="self"/>
  <link href="http://gaslight.github.com/octopress-blog/"/>
  <updated>2013-03-05T10:24:20-05:00</updated>
  <id>http://gaslight.github.com/octopress-blog/</id>
  <author>
    <name><![CDATA[Joel Turnbull]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[9 Lessons Web Designers Can Learn from Painting Portraits]]></title>
    <link href="http://gaslight.github.com/octopress-blog/blog/2013/02/08/9-lessons-web-designers-can-learn-from-painting-portraits/"/>
    <updated>2013-02-08T00:00:00-05:00</updated>
    <id>http://gaslight.github.com/octopress-blog/blog/2013/02/08/9-lessons-web-designers-can-learn-from-painting-portraits</id>
    <content type="html"><![CDATA[<h2>9 Lessons Web Designers Can Learn from Painting Portraits</h2>

<script async class="speakerdeck-embed" data-id="a8b97c6054380130178722000a1e8e84" data-ratio="1.33333333333333" src="http://gaslight.github.com/octopress-blog//speakerdeck.com/assets/embed.js"></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[(Pi + Rails + Heroku) * Students = Awesome]]></title>
    <link href="http://gaslight.github.com/octopress-blog/blog/2013/01/31/pi--rails--heroku--students--awesome/"/>
    <updated>2013-01-31T00:00:00-05:00</updated>
    <id>http://gaslight.github.com/octopress-blog/blog/2013/01/31/pi&#8211;rails&#8211;heroku&#8211;students&#8211;awesome</id>
    <content type="html"><![CDATA[<p><img style="width: 100%" src="http://media.tumblr.com/c0ba81d84eab0abef18a386253cc50da/tumblr_inline_mhg9mxCWxt1qz4rgp.png" alt="image"/></p>

<h2 id="background">Background</h2>

<p>Over the course of the past two school years, my colleague <a href="http://rabiedenharn.tumblr.com/">Rob Biedenharn</a> and I have been working with <a href="http://coachbrinkmann.tumblr.com/">Tom “Coach” Brinkmann</a>’s students at <a href="http://www.littlemiamischools.com/school_home.aspx?schoolid=1">Little Miami High School</a>, attempting to teach them Web development using Ruby on Rails to aid in their participation in <a href="http://www.bpa.org/">Business Professionals of America</a> competitions and to provide them with skills very much in demand locally.</p>

<p>We supplied the students with <a href="http://coachbrinkmann.tumblr.com/day/2012/12/05">all the usual links</a> to facilitate self-guided learning on Windows PCs but it quickly became evident that we were facing two challenges:</p>

<ol><li><p>Providing the students a development environment similar to what they will encounter in a professional setting.</p></li>
<li><p>Maintaining student engagement.</p></li>
</ol><p>After much trial and error, constrained primarily by the school’s existing Windows PC labs and no capital to change that fact, we were unable to avoid the fact that there is no substitute for a Unix-based operating system for hosting Rails projects.</p>

<p>Having a development environment that closely resembles the production environment builds the developer’s competance and confidence in dealing with production system administration issues. Arguably, apps deployed to <a href="http://www.heroku.com/">Heroku</a> (a key component of the exercise below) are hosted in anything but a typical Linux environment. Nevertheless, despite Heroku’s best efforts (and we <em>LOVE</em> Heroku) most Rails apps running in the wild are hosted on “traditional” Linuxes.</p>

<p>The ability to stand-up a development system for minimal cost was crucial to overcoming the second constraint above. This fact has been proven recently as more than 50 of Coach Brinkmann&#8217;s students, from Freshman to Seniors, created and deployed at least one Rails app to Heroku, and most completed two or more.</p>

<p>Seeing an app run locally was interesting to the students. However deploying it to the Web and sharing it with family, friends and classmates who entered data from their computers and smart devices went far beyond interesting. The Raspberry Pi running an Open Source operating system (Debian Linux in our case) met that criteria perfectly.</p>

<p>Below is the exercise that was recently assigned to each of Coach Brinkmann’s classes. Students were given 70 minutes of classroom time to complete it. Rob and I made ourselves available for assistance two evenings, and Rob went in once during normal school hours. At last report nearly all students had successfully completed their demo app and most had created at  least one other app of their own design. The fact that several students had an aptitude for creating Web apps was not lost on us.</p>

<h2 id="prerequisites">Prerequisites</h2>

<ul><li>You’ll need (to have access to) a Mac computer. If you’ve devised a mean of completing the steps below on a Windows PC then by all means <a href="mailto:bill@gaslight.co">email me!</a> With minimal modification, you can run this demo from an existing Linux PC but as a Linux user we trust you to already know this! :)</li>
<li>Basic knowledge about <a href="http://linuxcommand.org/lts0020.php">command line navigation</a> in OSX or Linux will aid in comprehension of this guide.</li>
<li>If you don’t already have one, you’ll need to <a href="https://api.heroku.com/signup">sign up for a Heroku account</a>.</li>
</ul><h2 id="before-we-begin">Before We Begin…</h2>

<p>If you don’t have a Pi, <a href="http://www.mcmelectronics.com/product/83-14421">get one</a>! If you have one but don’t have the operating system installed, grab this image and follow these instructions using a Mac or Linux computer that has an SD card reader embedded or attached:</p>

<ol><li><p>Insert a <a href="http://www.amazon.com/gp/product/B007QOX5AU/ref=as_li_qf_sp_asin_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=B007QOX5AU&amp;linkCode=as2&amp;tag=billbarnettco-20">16GB SD card</a> in your Mac computer.</p></li>
<li><p>Download <a href="http://dl.dropbox.com/u/1275806/rpi.img.gz">this disk image file</a>.</p></li>
<li><p>Open a terminal window and change directory to the location into which you downloaded the disk image file above. Then expand the disk image file using this command:</p>

<pre><code data-language="shell">gunzip rpi.img.gz</code></pre></li>
<li><p>Enter this command to locate your SD card:</p>

<pre>diskutil list</pre></li>
<li><p>Run the command below to unmount but not eject your SD card. Note that the question mark (?) is the disk number which will be specific to your system.</p>

<pre>diskutil unmountDisk /dev/disk?</pre></li>
<li><p>Copy the disk image to your SD card by running the command below carefully substituting in the disk number obtained in the step above. Note that you will need run this command in the same directory where you downloaded and expanded the disk image file.</p>

<pre>dd if=rpi.img bs=1m of=/dev/rdisk?</pre></li>
</ol><p>There! You’re all set to proceed.</p>

<p><strong>SECURITY WARNING!!</strong></p>

<p>The disk image above contains ssh public keys for both Rob and me. This enables us to gain “emergency” access to a student’s system. If you do not wish for Rob or me to have access to your system you will need to run the following command on the system:</p>

<pre>rm /home/pi/.ssh/authorized_keys</pre>

<p><strong>WARNING!!!</strong>
If you’re going to mess up, here are the likely culprits!</p>

<ul><li>Your Pi needs Internet access to complete these tasks. Is the Ethernet cable plugged in?</li>
<li>You’ll need to be patient! Don’t just start typing in commands and then hitting enter repeatedly. Wait for each command to finish running before proceeding.</li>
<li>As an addendum to the previous tip, read the output returned after running each command and LOOK FOR ALL ERRORS.</li>
<li>If there are errors, look for typos in the command you just entered. The last command you ran can be accessed by hitting the up arrow (ꜛ) key.</li>
<li>Again, computers excel at reproducing errors. They’re junk in, junk out! Be careful you have entered each command exactly as it appears in the instructions below.</li>
</ul><h2>1. Get Pi &amp; Login</h2>

<p>Connect the Raspberry Pi to a monitor, keyboard, mouse, and network and plug in the power.</p>

<pre>Username: pi
Password: raspberry</pre>

<p>Start the GUI</p>

<pre>startx</pre>

<h2>2. Start Terminal Session</h2>

<p>Double click the LXTerminal icon on the desktop to open the terminal window. Enter the command below and look for the “Projects” directory.</p>

<pre>ls</pre>

<p>If no “Projects” directory make one and change into it:</p>

<pre>mkdir -p Projects
cd Projects</pre>

<h2>3. Generate Skeleton Rails App</h2>

<p>Enter the following command.</p>

<pre>rails new grandchildren</pre>

<p>Sit back and watch the magic of Ruby-on-Rails as a new (but empty) project is created in the Projects directory.</p>

<pre>cd grandchildren
rails server</pre>

<p>Double click the Chromium browser link on the desktop. Visit the address: <a href="http://localhost:3000/">http://localhost:3000/</a>. (This link will only work if you’re reading these instructions on your Pi.)</p>

<p>Once you’ve verified that the empty site displays properly (“Welcome aboard” will appear at the top of the page) you need to stop the server by hitting CTRL-C in the LXTerminal window.</p>

<h2>4. Generate Resources &amp; Database</h2>

<p><strong>STOP!</strong> Type the following line on the command line <strong>BUT DO NOT</strong> hit enter until the instructor or assistant has validated there are no errors/typos!</p>

<pre>rails generate scaffold Offspring name state children:integer grandchildren:integer</pre>

<p>Now run this command.</p>

<pre>rake db:create db:migrate</pre>

<p><strong>IF</strong> the migration fails, read the error message carefully. If you can fix things, just redo the migration part as the database file will already have been created.</p>

<pre>rake db:migrate</pre>

<p>Restart the server:</p>

<pre>rails server</pre>

<p>Refresh your browser. (And no change… but wait!)</p>

<h2>5. User Experience!</h2>

<p>Now visit:  <a href="http://localhost:3000/offsprings">http://localhost:3000/offsprings</a></p>

<p>Enter a first record!</p>

<p>Enter your paternal grandparents’ last name, first name and the state in which they had their kids. How many children did they have and how many grandchildren do they have?</p>

<p>After creating that offspring record, hit “Back” (the link, not the browser button) to return to the list which now has one record.</p>

<p>Then create the record for your maternal grandparents.</p>

<p>Now that you can see a couple records, let’s get this application ready to deploy to the internet on <a href="http://www.heroku.com/">Heroku</a>.</p>

<h2>6. Preparing to Deploy to Heroku</h2>

<p>Install the Heroku Toolbelt on your Pi. This takes a while so we will let it run in a separate window as we edit some other files locally. After opening a new LXTerminal window, run:</p>

<pre>wget -qO- <a href="https://toolbelt.heroku.com/install-ubuntu.sh"><a href="https://toolbelt.heroku.com/install-ubuntu.sh">https://toolbelt.heroku.com/install-ubuntu.sh</a></a> | sh</pre>

<p>That’s “hyphen, Q, capital O, hyphen.”</p>

<h2>7. Opening Emacs to Edit Files</h2>

<p>There are just a few changes that need to be made in order to deploy your application to the Heroku service.</p>

<ul><li>The database locally is SQLite3, but Heroku only supports PostgreSQL.</li>
<li>The default index.html file needs to be removed.</li>
<li>The Offspring list should be the default page for the application.</li>
</ul><p>Let’s take these one at a time.</p>

<p>Open Emacs (shortcut on the desktop) and choose “File&#160;» Open” and find the “Gemfile” in the project root which is Projects/grandchildren</p>

<p>Where you see the line:</p>

<pre>gem 'sqlite3'</pre>

<p>We are going to change this to use SQLite3 in development and test environments (which are local to your Raspberry Pi) and PostgreSQL on production (which will be at Heroku).</p>

<pre><code data-language="ruby">group :development, :test do
  gem 'sqlite3'
end

group :production do
  gem 'pg', require: false
end
</code></pre>

<p>When you’re done making your changes, save them by choosing “File&#160;» Save” from the menu.</p>

<p>We can’t build the pg gem on the Pi so we have to re-run the bundle install avoiding production.</p>

<p><strong>IF</strong> you are in the wrong directory, change to the right one with:</p>

<pre>cd ~/Projects/grandchildren</pre>

<p>Then run this bundle command:</p>

<pre>bundle install --without production</pre>

<p>Go back to the command line and remove the index file.</p>

<pre>rm public/index.html</pre>

<p>Edit Rail’s routing file using Emacs choosing “File&#160;» Open” and selecting the “routes.rb” file within the config directory. Find the line:</p>

<pre><code data-language="ruby"># root :to =&gt; 'welcome#index'</code></pre>

<p>Change it to:</p>

<pre><code data-language="ruby">root :to =&gt; 'offsprings#index'</code></pre>

<p>Note that there are two (2) changes:</p>

<ul><li>the ‘#’ at the beginning (which comments out the rest of the line) is removed</li>
<li>‘welcome’ is replaced with ‘offsprings’</li>
</ul><h2>8. To Heroku!</h2>

<p>Replace the <strong>bold</strong> text below with your personal email address and name.</p>

<pre>git init .
git config --global user.email "**you@example.com**"
git config --global user.name "**Your Name**"
heroku login
heroku keys:add</pre>

<p>If you receive this message:</p>

<pre>Could not find an existing public key.
Would you like to generate one? [Yn]</pre>

<p><strong>JUST HIT ENTER!</strong></p>

<p>Then proceed with:</p>

<pre>heroku apps:create --addons heroku-postgresql:dev</pre>

<p>You will receive a response similar to:</p>

<pre>Creating desolate-eyrie-5848... done, stack is cedar
Adding heroku-postgresql:dev to desolate-eyrie-5848... done
<a href="http://desolate-eyrie-5848.herokuapp.com/"><a href="http://desolate-eyrie-5848.herokuapp.com/">http://desolate-eyrie-5848.herokuapp.com/</a></a> | git@heroku.com:desolate-eyrie-5848.git
Git remote heroku added</pre>

<p>The output displays your application’s new URL, in the case above it is: <a href="http://desolate-eyrie-5848.herokuapp.com/."><a href="http://desolate-eyrie-5848.herokuapp.com/.">http://desolate-eyrie-5848.herokuapp.com/.</a></a> Your application will have some other name similar in format to “word-another-9999.”</p>

<p>Next, commit your code (copy it up to your “production” site):</p>

<pre>git add .
git commit -m "this is my first commit EVAR"
git push heroku master
heroku run rake db:migrate
heroku restart</pre>

<p>Go to your bright shiny new Web app (the URL returned in the step above)!</p>

<h2>9. Done? Logout and Shutdown!</h2>

<p>Once you’ve entered some data in your new app and all the proper authorities have inspected your app for correctness simply enter the following command in the terminal window:</p>

<pre>sudo /sbin/shutdown -h now</pre>

<p>When the screen is blank AND ONLY when the screen is blank you may disconnect your power supply and remove your SD card.</p>

<hr><h2 id="some-troubleshooting-tips">Some troubleshooting tips:</h2>

<p>After making a change to your code:</p>

<pre>git commit -am "your commit message"</pre>

<p>After every single change you make to the code on your local system you’ll need to redeploy to Heroku:</p>

<pre>git push heroku master</pre>

<p>The app will be automatically (re)started so no need to run a separate ‘heroku restart’ command like was needed when a migration was run.</p>

<h2 id="the-nuclear-option">The Nuclear Option!</h2>

<p>If all else fails issue the command below and start again from Step #3:</p>

<pre>cd ..
rm -fr ~/Projects/grandchildren</pre>

<p>Or a tactical strike to restart at Step #4:</p>

<pre>rails destroy scaffold Offspring</pre>

<p>If you run into problems with db:migrate or db:create, you can try this command:</p>

<pre>rake db:reset</pre>

<p>This will attempt to recreate the database file but should that fail, simply enter these two commands:</p>

<pre>rm -f db/development.sqlite3 test.sqlite3
rake db:create db:migrate</pre>

<h2 id="wrap-up">Wrap-up</h2>

<p>If you’re not the slightest bit curious about the magical commands you entered completing this tutorial then you’re done. Just remember yes, I would like fries with that. :)</p>

<p><strong>However</strong> if you are curious then by all means I encourage you to fire up your Pi, login and explore. Your assignments are:</p>

<ul><li><p>What is the purpose of this command? <code>man ls</code></p></li>
<li><p>If there’s no manual entry for the <code>rails</code> command and I can use <code>rails --help</code> to get help for the rails command, what command can I use to determine which “version” of rails I’m currently running?</p></li>
<li><p>What’s so special about the <code>root</code> user?</p></li>
</ul><p>Most of all, have fun and let <a href="http://rabiedenharn.tumblr.com/">Rob</a> or <a href="mailto:bill@gaslight.co">me</a> know if we can be of any help!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gaslight Podcast #10: Corey Haines via CodeMash]]></title>
    <link href="http://gaslight.github.com/octopress-blog/blog/2013/01/31/gaslight-podcast-10-corey-haines-via-codemash/"/>
    <updated>2013-01-31T00:00:00-05:00</updated>
    <id>http://gaslight.github.com/octopress-blog/blog/2013/01/31/gaslight-podcast-10-corey-haines-via-codemash</id>
    <content type="html"><![CDATA[<ul><li><a href="https://s3.amazonaws.com/gaslight-podcasts/gaslight-podcast-010.mp3" rel="enclosure">Direct download</a></li>
<li><a href="https://itunes.apple.com/us/podcast/gaslight-software-blog/id563643631">Subscribe with iTunes</a></li>
<li><a href="http://feeds.feedburner.com/gaslightpodcast">Subscribe with RSS</a></li>
</ul><p>Chris Nelson sat down with The Legend, Corey Haines at the CodeMash conference. Corey talks about what he&#8217;s learned from his pair programming tour across the country.  We also hear about his experience putting together a new video series called <a href="http://cleancoders.com/codecast/bawch-episode-1/show">Build An App with Corey Haines</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Objective-C's Designated Initializer Pattern]]></title>
    <link href="http://gaslight.github.com/octopress-blog/blog/2013/01/28/objective-cs-designated-initializer-pattern/"/>
    <updated>2013-01-28T00:00:00-05:00</updated>
    <id>http://gaslight.github.com/octopress-blog/blog/2013/01/28/objective-cs-designated-initializer-pattern</id>
    <content type="html"><![CDATA[<p>Out of the box in Objective-C you can initialize an instance of a class by
  calling alloc and init on it.</p>

<script src="https://gist.github.com/joelturnbull/4635006.js"></script>

<p>Alloc allocates memory for the instance, and init gives it&#8217;s instance
  variables it&#8217;s initial values. Both return pointers to the new
  instance, hence the method chain. In this case, unless init was
  re-implemented in the Party class, any instance variables in the party
  instance were set to 0, or the zero pointer otherwise known as
  nil.</p>

<p>That&#8217;s no good. I am of the opinion that we should always strive to
  create complete objects, i.e. objects who never have nil values for their
  instance variables. In Objective-C there&#8217;s even a better reason for
  doing this. in Objective-C a message sent to nil is silently ignored. An
  unexpected nil value could create a debugging nightmare for
  you.</p>

<p>So how do we do initialize the variables? Here&#8217;s one way.</p>

<script src="https://gist.github.com/joelturnbull/4634990.js"></script>

<p>But that&#8217;s terrible. There&#8217;s danger in setting properties after
  the fact. The user could fail to set the state of a vital instance variable,
  and as the class designer, we&#8217;re not being good citizens. I can&#8217;t
  really put it any better than Kent Beck does in &#8220;Smalltalk Best
  Practice Patterns&#8221;.</p>

<p>&#8220;what is the first thing you want to know about a class, once you’ve
  decided it may do what you want it to do?  The first question is “what does
  it take to create an instance?”  As a class provider, you’d like the answer
  to this question to be as simple as possible. With the style described above,
  you have to track down references to the class and read the code before you
  get an inkling of how to create a useable instance.  If the code is complex,
  it may take a while before you figure out what is required and what is
  optional in creating an instance.&#8221;</p>

<p>As class designers, we want to make sure there is method to represent each
  valid way to create an instance. Beck describes the pattern as the
  &#8220;Complete Creation Method&#8221;, Objective-C calls it
  &#8220;Designated Initializer&#8221;.</p>

<p>Maybe in the domain of our example, a party can be created and have a
  default date if none is provided, and can have no attendees initially, but it
  really must have a location or it just doesn&#8217;t make sense to create
  it.</p>

<script src="https://gist.github.com/joelturnbull/4634985.js"></script>

<p>It could be there are times it makes sense to initialize the other values,
  date and attendees. If we provided the protocol to do so the Party.h class
  interface might look like this.</p>

<script src="https://gist.github.com/joelturnbull/4634977.js"></script>

<p>There are the four valid ways you can create a party. The trick is that only
  one of these methods really sets the instance variables at the end of the
  day. That method is called the Designated Initializer, and all other
  initializers defer to it, directly or indirectly. Take a look at the
  implementation.</p>

<script src="https://gist.github.com/joelturnbull/4634948.js"></script>

<p>In Party, <code>initWithLocation:date:attendees:</code> is the Designated Initializer. It
  has parameters for the most important and frequently used instance variables
  of Party. It is called from all of the other initializer methods. Those
  methods make use of shared default settings where values are not passed
  in.</p>

<p>It is also possible that initializers could call initializers other than the
  Designated Initializer to achieve the same effect. <code>initWithLocation:</code> could
  defer to <code>initWithLocation:date:</code>  which would defer to
  <code>initWithLocation:date:attendees:</code>. Regardless of whether <code>initWithLocation:</code>
  defers to <code>initWithLocation:date:attendees:</code> directly or indirectly, all rounds
  lead to the Designated Initializer.</p>

<p>The Designated Initializer gives us a central point where modifications to
  instance creation can happen, giving us the most control over how instances
  are initialized. At the end of the deferment chain, there is only one method
  that is responsible for setting the initial state of the object, and a
  complete object comes out every time.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mobile Web Apps: Are We There Yet?]]></title>
    <link href="http://gaslight.github.com/octopress-blog/blog/2013/01/18/mobile-web-apps-are-we-there-yet/"/>
    <updated>2013-01-18T00:00:00-05:00</updated>
    <id>http://gaslight.github.com/octopress-blog/blog/2013/01/18/mobile-web-apps-are-we-there-yet</id>
    <content type="html"><![CDATA[<p>As a non-mac owner I remember seeing <a class="c1" href="http://www.youtube.com/watch?v=Jh2OVJjbKUI">this promotional video</a> from 37signals and feeling like I needed to buy a mac if I wanted to be a great Ruby programmer or web designer. In Ruby’s culture there is a strong preference for Apple products.</p>
<blockquote>
<div>
<p>“The great thing about Ruby on the Mac is that it just feels like they fit together.”</p>
<p>— DHH</p>
</div>
</blockquote>
<p>Because of this preference there is a lot of crossover between the Ruby and the iOS world</p>
<div><img alt="image" src="http://media.tumblr.com/7baaa76ec668072af581605d65d769c5/tumblr_inline_mgtsgmxJZA1r9fv8b.jpg"/></div>
<p>I own a Mac Book Pro and an iPhone but I don’t feel loyalty to these products. The reason I became a web developer is because I love open source software and, on the web, open source is king. While everyone else was pirating Photoshop, I was writing Python scripts in Gimp. I ran <a class="c1" href="http://en.wikipedia.org/wiki/List_of_Ubuntu_releases#Ubuntu_4.10_.28Warty_Warthog.29">Warty Warthog</a> on my PC. I enjoyed a good game of <a class="c1" href="http://www.tauniverse.com/">Total Annihilation</a>. And although Gmail isn’t open source, web apps like this give Linux, Windows, and OSX users a certain independence from their operating systems that I enjoy</p>
<p>Apple’s iPhone and iPad market share is impressive and I accept that the potential to make money on these devices is compelling, but on personal projects I am most excited about developing on the web where everyone (sort of) can access my software</p>
<p>So with the neckbeard sentiment out of the way, I want to share what I’ve learned so far about developing mobile web apps. As I see it, there are three levels of appy-ness</p>
<h2>Level 1 - Make It Fit On The Screen</h2>
<p>Just throw a responsive framework on your site to make it look great on any size screen! <a class="c1" href="https://twitter.com/t_crayford/status/290989695754719233">Okay, that didn’t work</a>. Except for the demo sites for these libraries, I haven’t seen a responsive website yet that could just use a CSS framework without any manual tweaking. It’s time to dig into <a class="c1" href="http://www.w3.org/TR/css3-mediaqueries/">CSS media queries</a> so that people get a good experience on their phones as well as a computer monitor</p>
<p>Even on this very simple stage of mobileness, new developers are going to be surprised to find that laying out your HTML views for mobile isn’t trivial. Take a look at this <a class="c1" href="http://lanyrd.com/2011/bd11/sccwh/">presentation deck</a> for a good primer</p>
<h2>Level 2 - Minimize the Effects of Connection Latency With Asynchronous UIs</h2>
<p>This is where I get really passionate about the design of applications. Maybe it’s because I’m impatient and I like fast UIs. <em>Maybe it’s because I used Lotus Notes for 5 years, an application which after 23 years of development still blocks the entire UI when fetching an email, rending all Notes application unusable if you happen to be on some abysmal guest wireless connection while tunneling through a VPN server in Tampa.</em> Yeah, it’s probably that.</p>
<p>When I try out mobile web apps, this is where I see the biggest problems. When I first looked at PhoneGap, the top featured product was <a class="c1" href="http://phonegap.com/app/untappd/">Untapped</a>. The screenshots look great, but it feels like you’re just tapping around a very pretty web page when you use it. Tap the bottom navigation and you’ll see a spinner followed by a complete refresh of the page. User expectations for a native app are that the UI is always responsive and available, even if it needs to do something like fetch remote data. A refresh is a break in the experience, and a dead giveaway of the traditional web request cycle. For more of these issues also see <a class="c1" href="http://www.sencha.com/blog/the-making-of-fastbook-an-html5-love-story/">Sencha’ Blog post on Fastbook</a> where they demonstrate several places where Facebook’s native app loses state and local data when switching views</p>
<div><img alt="image" src="http://media.tumblr.com/045b778e0ae7cbd7a4fb67ccc805e90f/tumblr_inline_mgts9umhmZ1r9fv8b.png"/></div>
<p>For a web app to feel responsive one needs to make a huge shift away from simply rendering web pages after an HTML request. This means more responsibility on the client is required: client-side template rendering, local data caching, and optimistic responses to user actions. My favorite article covering these ideas is still <a class="c1" href="http://alexmaccaw.com/posts/async_ui">this one from Alex Maccaw</a>. Also check out <a class="c1" href="http://cheeaun.com/blog/2012/03/how-i-built-hacker-news-mobile-web-app_26">the second post about the creation of the Hacker News Web App</a>. Chee Aun has an awesome implementation of the HTML5 Application Cache that only downloads new assets if the application version has changed</p>
<div><img alt="image" src="http://media.tumblr.com/9356a9d3792574581959072087b6204c/tumblr_inline_mgtse6HnAp1r9fv8b.png"/></div>
<p>For me, the technologies that enable these asynchronous UIs are the most exciting things in software development today. Frameworks like Backbone.js and Ember.js, push events via Server Sent Events and Websockets, and all those fancy CSS3 tricks make developing fast webapps possible</p>
<h2>Level 3 - Platform Integration</h2>
<p>It won’t be too tough to get your app to fit on that tiny mobile screen and you’ll be able to make a lightning fast web app using rich client technologies. But when it comes to platform integration we’re a little stuck. If you want to take a photo, use the GPS, or run your app outside Mobile Safari, you’ll need to hunker down with some native code.</p>
<p>It seems that the current sweet spot for cross-platform mobile apps is a hybrid web / native app. A hybrid app uses a native code wrapper around HTML web views, so that the majority of the functionality can be shared across different platforms. In this way, you can update your application and avoid the bureaucracy of an app store approval process. You can then fall back on native code for smooth animations, native-looking navigation, and access to proprietary APIs. LinkedIn has <a class="c1" href="http://venturebeat.com/2012/05/02/linkedin-ipad-app-engineering/">been very public about their hybrid web app</a> and although Google hasn’t said much about the new Gmail and Maps apps, it is clear that they are using HTML for most of their views</p>
<h2>Are We There Yet?</h2>
<p>If you want to make mobile apps with no compromises, you’ll want a completely native application on whatever platform you choose. Have fun with your piles of money and great user experiences</p>
<p>If you need a cross platform app, you’ll benefit from liberal use of web views to minimize the amount of native code required on each platform. This is the approach I would use to create a practical web application that needs to work today.</p>
<p>As tempting as Apple’s native world is, if you dream of <a class="c1" href="http://developer.chrome.com/apps/first_app.html">Chrome Apps</a>, <a class="c1" href="http://en.wikipedia.org/wiki/Canvas_element">Web Canvases</a>, and <a class="c1" href="http://www.html5rocks.com/en/tutorials/appcache/beginner/">App Cache Manifests</a> like I do, you’ll be <a class="c1" href="http://37signals.com/svn/posts/3269-behind-the-speed-basecamp-mobile">pushing the boundaries of the mobile web</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gaslight Podcast #9: Digital Doodles with Ryan Arthur]]></title>
    <link href="http://gaslight.github.com/octopress-blog/blog/2013/01/17/gaslight-podcast-9-digital-doodles-with-ryan-arthur/"/>
    <updated>2013-01-17T00:00:00-05:00</updated>
    <id>http://gaslight.github.com/octopress-blog/blog/2013/01/17/gaslight-podcast-9-digital-doodles-with-ryan-arthur</id>
    <content type="html"><![CDATA[<div class="post_content clearfix" id="post_content_38982019788">
<div class="post_text_wrapper">
<ul><li><a href="https://s3.amazonaws.com/gaslight-podcasts/gaslight-podcast-009.mp3" rel="enclosure">Direct download</a></li>
<li><a href="https://itunes.apple.com/us/podcast/gaslight-software-blog/id563643631">Subscribe with iTunes</a></li>
<li><a href="http://feeds.feedburner.com/gaslightpodcast">Subscribe with RSS</a></li>
</ul><p><span>This week we recorded the Podcast at Kevin&#8217;s house with our past design intern and now newest full-time hire, Ryan Arthur. In this episode we talk about learning with digital doodles, HAML &amp; SASS, responsive designs, the importance of user experience design over aesthetic design, and how to find a design job you&#8217;ll love.</span></p>
<ul><li><span><a href="https://github.com/arthurra">Ryan on Github</a></span></li>
<li><a href="http://codepen.io/arthurra">Ryan&#8217;s sliding search thingy on CodePen</a></li>
</ul></div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ember Resources]]></title>
    <link href="http://gaslight.github.com/octopress-blog/blog/2013/01/11/ember-resources/"/>
    <updated>2013-01-11T00:00:00-05:00</updated>
    <id>http://gaslight.github.com/octopress-blog/blog/2013/01/11/ember-resources</id>
    <content type="html"><![CDATA[<p>I&#8217;ve heard lots of good noises coming from the Ember camp lately, so I started diving in a couple weeks ago. I&#8217;m really excited with what I&#8217;ve seen, but getting started is still harder than it should be. The documentation is improving rapidly, but it was still difficult to get over the initial hump. We&#8217;re super lucky to have <a href="https://twitter.com/workmanw">@workmanw</a> here in town. He&#8217;s a Sproutcore veteran and Ember promoter who&#8217;s also been really helpful with questions we&#8217;ve had along the way. I also compiled this list of what I found to be the most helpful.</p>

<h2>Videos</h2>

<h3>Yehuda&#8217;s Talk at Seattle Ember</h3>

<iframe width="100%" height="315" src="http://www.youtube.com/embed/4Ed_o3_59ME" frameborder="0" allowfullscreen></iframe>

<p>Yehuda waxes philosophical on the topics of convention vs. configuration and how the new and improved router works.</p>

<h3>Tom&#8217;s Talk at Seattle Ember</h3>

<iframe width="100%" height="315" src="http://www.youtube.com/embed/_6yMxU-_ARs" frameborder="0" allowfullscreen></iframe>

<p>Tom covers <a href="https://github.com/ember/data">Ember Data</a>. Data is exciting because it&#8217;ll abstract away lots of work that gets duplicated on most projects.</p>

<h3>Intro to Ember</h3>

<iframe width="100%" height="315" src="http://www.youtube.com/embed/hod-KX81i7s" frameborder="0" allowfullscreen></iframe>

<h3>Testing Ember Apps</h3>

<iframe width="100%" height="315" src="http://www.youtube.com/embed/tcdZFA5CMCk" frameborder="0" allowfullscreen></iframe>

<h2>Articles</h2>

<h3><a href="http://trek.github.com/">Advice on &amp; Instruction in the Use Of Ember.js</a></h3>

<p>Trek has been killing it on the documentation lately. He&#8217;s responsible for a lot of the new guide content on <a href="http://emberjs.com">http://emberjs.com</a>. This post was super helpful starting from nothing and building a super simple Ember app.</p>

<h3><a href="http://www.adobe.com/devnet/html5/articles/flame-on-a-beginners-guide-to-emberjs.html">Flame on! A beginner&#8217;s guide to Ember.js</a></h3>

<p>Another great article walking through complex concepts from beginning to end.</p>

<h3><a href="https://gist.github.com/3981133">It all begins with Templates</a></h3>

<p>Tom&#8217;s intro to new router syntax.</p>

<h3><a href="http://www.thesoftwaresimpleton.com/blog/2012/04/03/testing-ember-and-the-runloop/">Testing and the Run Loop</a></h3>

<h3><a href="http://reefpoints.dockyard.com/ember/2013/01/07/building-an-ember-app-with-rails-api-part-1.html">Building an Ember app with Rails</a></h3>

<h2>Guides</h2>

<ul><li><a href="http://emberjs.com/guides/">Ember Guides</a></li>
<li><a href="http://emberjs.com/api/">Ember API</a></li>
</ul><h2>Code Samples</h2>

<ul><li><a href="https://github.com/dgeb/ember_data_example">Ember Contacts</a></li>
<li><a href="https://github.com/trek/ember-todos-with-build-tools-tests-and-other-modern-conveniences">TodosMVC with lots of awesome</a></li>
</ul><p>Good luck! I&#8217;m <a href="https://twitter.com/cdmwebs">@cdmwebs</a> on Twitter. Feel free to reach out if you need some help!</p>

<p>Edit: added link from <a href="https://twitter.com/janders223">@janders223</a>. Thanks!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How I Sold Gaslight On Our New Brand]]></title>
    <link href="http://gaslight.github.com/octopress-blog/blog/2013/01/08/how-i-sold-gaslight-on-our-new-brand/"/>
    <updated>2013-01-08T00:00:00-05:00</updated>
    <id>http://gaslight.github.com/octopress-blog/blog/2013/01/08/how-i-sold-gaslight-on-our-new-brand</id>
    <content type="html"><![CDATA[<p><img alt="image" src="http://media.tumblr.com/bd2b00839356c9caf41383514d3a681a/tumblr_inline_mg881bEX2r1r9fv8b.png"/></p>



<p>The scariest task to be given to a brand new designer on a first day: “Rebrand our company”. Even scarier? There is no one decision maker. So began the Gaslight rebranding!</p>



<p>A little backstory. Before I began at Gaslight, I had interned with 4 graphic design firms. Each had different emphasis, from Pampers packaging to doing the field wall for the Orange Bowl. The one thing in common with all of these places was that design was the emphasis. We didn’t worry about how anything worked, just that it was designed on the surface. Gaslight is different. But that’s another blogpost, for another day.</p>



<p>So back to the challenge at hand: a rebrand. Something I had experience in school, but never in the real world. I was confident I could produce the work, but I encountered a new obstacle: at every point of the process, I was selling the idea of a brand to the company, and it was not always easy. First off, I had to grasp that I’m not the intern anymore, nor am I a junior designer (aka glorified intern). I’m in charge, and have to trust my instincts. I get to put my stamp on things, I get to be involved, I feel like I’m making a real impact right away. I had a group of people that was ready… ok kinda ready, to open their company up to a new approach. I was up for the challenge, and after a bumpy start, finally got the design and opinions moving in the right direction.</p>



<p>Now the good stuff.</p>



<h2>A Little About a Logo</h2>

<p></p>

<p><a href="http://media.tumblr.com/fd1bab1b841e5677a36d52d2427b4204/tumblr_inline_mg4blk7WcX1r9fv8b.png"><img alt="image" class="left-image" style="margin-right:20px" src="http://media.tumblr.com/51bbdec7cff36b4244809a8e08b3055b/tumblr_inline_mg4bkuLvIG1r9fv8b.png"/></a></p>



<p>What do I think a logo is? The “face of your company”, what people see on a site, on a card that represents your company. It can be as simple as swoosh, or as hated a square with the word “Gap” written next to it. Once the name Gaslight was settled on, I began the process of creating a logo for the company. I’m traditional and I like to start with paper sketches. I often find my thoughts more confined when I first begin on the computer. With pen and paper, I have the ability to get a lot of ideas out quickly. No matter how much of a hurry I am in, for logo or a UI, I always start this way because the end product is always more well thought-out.</p>



<p>Next, I picked a few sketches and started to digitalize them, still playing with forms and typefaces. At this point, everything is in black and white as well. I also made the decision to move away from the flame icon. It’s a fine icon, but it’s so hard to come up with an ownable mark that is a flame. The company was split, some wanted a flame reference, some wanted something new. Happily for me, a very geometric and different direction was chosen.</p>



<div class="group"><a href="http://media.tumblr.com/e840caddab1fa37ea361d2824a2ea112/tumblr_inline_mg47izMhFC1r9fv8b.jpg"> <img alt="image" class="left-image" style="border: 1px solid gray" src="http://media.tumblr.com/b9e9f1ca9782f815dbb675616d3d601d/tumblr_inline_mg47i2Ko6O1r9fv8b.png"/></a> <a href="http://media.tumblr.com/c593b3c2e96e80f846c80526133e2e76/tumblr_inline_mg47jtZeCs1r9fv8b.jpg"> <img alt="image" class="left-image" style="border: 1px solid gray" src="http://media.tumblr.com/26b274eb018ccb279c5ff8486c0c577d/tumblr_inline_mg47k0kV7L1r9fv8b.png"/></a> <a href="http://media.tumblr.com/09eb706487ba04f2ddb90df6a9be9ca3/tumblr_inline_mg47k77aj21r9fv8b.jpg"> <img alt="image" class="left-image" style="border: 1px solid gray" src="http://media.tumblr.com/65c49faafd66f3489be525e23cfaa95c/tumblr_inline_mg47ke0Pwr1r9fv8b.png"/></a> <a href="http://media.tumblr.com/a934ae1174fe2e3973462b26c5cc32f7/tumblr_inline_mg47kkUSvN1r9fv8b.jpg"> <img alt="image" class="left-image" style="border: 1px solid gray" src="http://media.tumblr.com/b50e7df6980d4c1ea179d7a5277c86aa/tumblr_inline_mg47kpY9FU1r9fv8b.png"/></a> <a href="http://media.tumblr.com/e9f26427d07f634bc57900b16d7600dd/tumblr_inline_mg47kv3xTA1r9fv8b.jpg"> <img alt="image" class="left-image" style="border: 1px solid gray" src="http://media.tumblr.com/026158c99de047cb6688a5954389b7f1/tumblr_inline_mg47l11oSm1r9fv8b.png"/></a></div>

<p></p>

<p>The original idea of the mark came from playing with &lt;brackets&gt;, which are an integral part of the coding process. As I moved things around, I eventually settled on this strong mark, that resembled an abstracted gaslight. When I create a logo, it’s really important to me that it can stand on it’s own. It doesn’t need colored shapes behind it, it reads just as fine from 20 feet away and at 1 inch high. This mark is tough, and can stand up being put on a busy background. With this strong basis, I have more freedom to play with supporting elements.</p>



<p>Once the mark was drawn, I moved onto choosing a typeface. In case you’re curious, we chose DIN, a wonderful sans serif, with a little flair on the letters. We can’t be boring. I set the name in all caps to get those straight lines across, reinforcing the geometric qualities.</p>



<p>The colors? There is where I have a little less reasoning. There is so much blue out in the tech world, and I wanted to show we were different. The pop-y, primary colors allowed a sense of whimsy into our otherwise very geometric mark. We are a creative bunch, and I wanted to show that off.</p>



<p>So, we have a gaslight, rendered in a strong geometric form. It’s a little playful, but still strong and established, like the company it&#8217;s representing. Boom, logo.</p>



<p>Done? Not at all. I&#8217;ll have to admit, many were underwhelmed at the new company logo and held onto the old flame.</p>



<p><strong>Buy-in factor: Low</strong></p>



<h2>Building a Brand</h2>

<p></p>

<p>At this point we had a logo. That’s it. A logo doesn’t create an experience: a brand does. We forged forward creating elements that could be used to create a look that could elevate the logo and represent the team. How we treat type, how we use the brand colors, using photography and texture, copy, all of this fuels a brand experience. This was done by exploring how our brand stood in print, in the environment, and of course digitally.</p>



<h2>In Print</h2>

<p></p>

<p>The first thing that really had some “brand” to it was our business card. Yes there was the logo, but the type treatment, cut corner, and graphic on the front all elevated elements of the logo and creates an experience. I was starting to establish the feel of our brand, and how we were perceived beyond a logo.</p>



<div style="width:100%; text-align:center; margin: 20px 0px 20px 0px"><a href="http://media.tumblr.com/813e6771f8e74e0e9de26c62fa1f08f7/tumblr_inline_mg4e1wQGwK1r9fv8b.png"><img alt="image" src="http://media.tumblr.com/813e6771f8e74e0e9de26c62fa1f08f7/tumblr_inline_mg4e1wQGwK1r9fv8b.png"/></a></div>

<p></p>

<p>Another thing on the top of the list was a postcard to announce the new and improved Gaslight. It was meant to spark an interest in how we are different&#8230; we’re bigger and better. It was also our first crack at copy-writing in our brand voice. We wanted the voice to be fun and conversational. We’re more than faceless people; We’re trying to have fun with who we are with some customized code.</p>



<p>This was the first turning point, when the Gaslight team realized that there is more to this than a logo. There was a voice behind us, and a distinct style. I was starting to get some thumbs up where before I got frowns.</p>



<p><strong>Buy-in factor: Medium</strong></p>



<h2>Environment</h2>

<p></p>

<p>At the same time all this was occurring, our office-mates at Neo headed out to their new pad. We were left with a ton of space and a lot of white walls. White is boring, and we’re not a boring group of people. Brands don’t have to live on a computer or on a piece of paper, it can be alive in the environment. Big agencies have a branded area where people have an experience when they walk in. Why couldn’t we do that? I had a branded space vision, but when the black chalkboard paint went up on the first wall, it wasn&#8217;t looks of joy that I saw. As we painted the back of the room grey, another eye-browing raising choice at first, and moved onto our old blue wall, there began the “you know, I really like this.” Gaslight went from scared of the black and grey, to wanting to paint the whole place.</p>



<div style="width:100%; text-align:center; margin: 20px 0px 20px 0px"><a href="http://media.tumblr.com/26ac521c62779608b723c67daa7df977/tumblr_inline_mg87epzEt81r9fv8b.jpg"> <img alt="image" src="http://media.tumblr.com/cba9f12d784af9a84e2874a5b7571aec/tumblr_inline_mg86ufw2ez1r9fv8b.jpg"/></a></div>

<p></p>

<p>It wasn’t just paint. We created a sitting, creative area around the chalkboard wall for brainstorms. It’s fun to get your hands dirty sometimes! We finished off one of the grey walls with icons and quotes representing Gaslight, and stuck a giant logo in our front room, as well as our door.</p>



<div class="group"><a href="http://media.tumblr.com/1deee522d8c17b039c1483db0ea3868b/tumblr_inline_mg87b6XzXB1r9fv8b.jpg"> <img alt="image" class="left-image" src="http://media.tumblr.com/cbff6515a075b65ed48eda518f6c9f16/tumblr_inline_mg86hsM1NA1r9fv8b.jpg"/></a> <a href="http://media.tumblr.com/f370ca9dbe2b4c8905a03f33b0a507da/tumblr_inline_mg86u0PxvN1r9fv8b.jpg"> <img alt="image" class="left-image" src="http://media.tumblr.com/6dcc0539407510559544ff6bc299e06f/tumblr_inline_mg86mz9iqp1r9fv8b.jpg"/></a> <a href="http://media.tumblr.com/cbd8d75de28daf06fa5bcce9c6dbe09c/tumblr_inline_mg86kei3so1r9fv8b.jpg"> <img alt="image" class="left-image" src="http://media.tumblr.com/a6e6c506ea92a9381a5d093d9b0d02fe/tumblr_inline_mg86in5BVu1r9fv8b.jpg"/></a></div>

<p></p>

<p>So after a step back at first, the painting ended up being a huge step forward in terms of brand confidence. I think at this point, even if there were little things some team members didn’t like, overall it was getting the greenlight from everyone.</p>



<p><strong>Buy-in factor: High</strong></p>



<h2>Web</h2>

<p></p>

<p>We&#8217;re a company that puts out a digital product, so of course web presence is important. All of this preliminary work affected how I’ve approached the design of the <a href="http://gaslight.co">website</a>, and designing the <a href="http://gaslight.co">website</a> has made me rethink some aspects of the preliminary pieces. Let me explain. When we first put up a landing page to replace the old Gaslight Software site, it was right in the beginning, and by beginning, I mean we had the logo. I wasn’t sure what exactly our brand looked like yet. So we put something up that worked for the time being. As I started working out the print pieces and the environment, I realized the landing page wasn’t conveying the mood for the direction we had moved in.</p>



<p>When I first started the site design, my main concept was a sense of guidance. We’re lighting your path. I loved this idea of having this glowing gaslight, which can help guide you on the right way for your project. I ran with this concept, playing up color separation and linear elements. After a couple weeks of feeling like the design wasn’t right, I stepped back and thought “How does this display on mobile?” Constrained by this, it actually helped me distill what I wanted to show, and what was most important. It was a turning point, and things flowed into place.</p>



<div style="width:100%; text-align:center; margin: 20px 0px 20px 0px"><a href="http://gaslight.co"> <img alt="image" src="http://media.tumblr.com/37a1d3478b62e81204928d4929b1014f/tumblr_inline_mg87ufrvbY1r9fv8b.jpg"/></a></div>

<p></p>

<p>Like the brand, the <a href="http://gaslight.co">website</a> is meant to change and evolve. It’s a 1.0. I’m already thinking up ideas for the 1.2 and 2.0, but the groundwork is there. We have a solid direction, for the <a href="http://gaslight.co">website</a> and for the whole brand. It’s just time to keep building.</p>



<p><strong>Buy-in factor: Gaslighters are proud to show off the brand</strong></p>



<h2>Conclusion</h2>

<p></p>

<p>At the point I’m writing this, it’s been 6 months. That’s nothing in the corporate world I know, but it’s the perfect amount of time for a small business. I feel like as the brand was accepted, I was accepted into the Gaslight family. They have taught me so much by this experience, and I think I’ve taught them a thing or two on how branding can really elevate a business.</p>



<p>Over the past month or so, I’ve really firmed up how our brand is moving forward. There is a continuity between our office decorations to our <a href="http://gaslight.co">website</a> (woo plug), and that is what makes a brand. Hopefully you stick around with us, and watch our brand live and change!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gaslight Podcast #8: Girl Develop It]]></title>
    <link href="http://gaslight.github.com/octopress-blog/blog/2012/12/27/gaslight-podcast-8-girl-develop-it/"/>
    <updated>2012-12-27T00:00:00-05:00</updated>
    <id>http://gaslight.github.com/octopress-blog/blog/2012/12/27/gaslight-podcast-8-girl-develop-it</id>
    <content type="html"><![CDATA[<div class="post_content clearfix" id="post_content_37832564149">
<div class="post_text_wrapper">
<ul><li><a href="https://s3.amazonaws.com/gaslight-podcasts/gaslight-podcast-008.mp3" rel="enclosure">Direct download</a></li>
<li><a href="https://itunes.apple.com/us/podcast/gaslight-software-blog/id563643631">Subscribe with iTunes</a></li>
<li><a href="http://feeds.feedburner.com/gaslightpodcast">Subscribe with RSS</a></li>
</ul><p>We met with Sara Chipps and Erin Kidwell to talk about <a href="http://girldevelopit.com/">Girl Develop It</a>, an organization that holds classes and events for developers and aspiring developers. In this episode we talk about how Girl Develop It spread across the country with sold out classes in only 2 years. Also we discuss creating an inclusive atmosphere and what makes a great teacher.</p>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Seasons Greetings from Your Friends at Gaslight!]]></title>
    <link href="http://gaslight.github.com/octopress-blog/blog/2012/12/20/seasons-greetings-from-your-friends-at-gaslight/"/>
    <updated>2012-12-20T00:00:00-05:00</updated>
    <id>http://gaslight.github.com/octopress-blog/blog/2012/12/20/seasons-greetings-from-your-friends-at-gaslight</id>
    <content type="html"><![CDATA[<p><img src="http://media.tumblr.com/9a4a450a55f0879fed764d37e1fb83c4/tumblr_inline_mfcxy1cIrZ1qzr515.jpg" alt=""/></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What's Chris Nelson Been Up To?]]></title>
    <link href="http://gaslight.github.com/octopress-blog/blog/2012/12/13/whats-chris-nelson-been-up-to/"/>
    <updated>2012-12-13T00:00:00-05:00</updated>
    <id>http://gaslight.github.com/octopress-blog/blog/2012/12/13/whats-chris-nelson-been-up-to</id>
    <content type="html"><![CDATA[<p>Chris Nelson&#8217;s been busy!</p>

<p>In early November, Chris gave a talk at Ruby Conf &#8220;<a href="http://www.confreaks.com/videos/1316-rubyconf2012-machine-learning-for-fun-and-profit-the-story-of-how-my-customer-wrote-my-code">Machine learning for fun and profit: the story of how my customer wrote my code</a>&#8221;. In it, Chris delves into decision trees, when they are appropriate tools, and their implementation in Ruby. In domains that implement overwhelming numbers of conditional rules that can be expressed as tabular data, decision tree algorithms can be utilized to determine outcomes instead of writing tons of conditional logic.</p>

<p><a href="http://www.confreaks.com/videos/1316-rubyconf2012-machine-learning-for-fun-and-profit-the-story-of-how-my-customer-wrote-my-code"><img src="http://media.tumblr.com/tumblr_mezc6e6cy31r9fv8b.png"/></a></p>

<p>In late November, Elizabeth Naramore interviewed Chris on the Engine Yard Podcast, <a href="http://www.engineyard.com/podcast/gaslight-qcmerge-mastering-backbone">Cloud Out Loud</a>. Elizabeth and Chris talked about what we do at Gaslight and his <a href="http://www.masteringbackbone.com/">Mastering Backbone</a> training class. They talk about Chris&#8217;s latest open source project <a href="https://github.com/gaslight/backtastic">Backtastic</a>, which aims to make building forms in a Rails-backed Backbone app easier and more enjoyable. They talk about how the <a href="http://qcmerge.com/">QCMerge</a> conference, the <a href="http://www.meetup.com/Cincinnati-Web-Tech-Drinkup/">Web Tech Drinkup</a>, and <a href="http://gaslight.co/coffee">Gaslight Coffee</a> have revitalized the developer community in Cincinnati. Give it a listen if you&#8217;re interested in hearing details about what Chris has been working on, and the kinds of projects we&#8217;ve been working on at Gaslight!</p>

<p>Keep up the good work Chris!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gaslight Podcast #7: Software Project Guidance with Doug Alcorn - Part 2]]></title>
    <link href="http://gaslight.github.com/octopress-blog/blog/2012/12/13/gaslight-podcast-7-software-project-guidance-with-doug-alcorn---part-2/"/>
    <updated>2012-12-13T00:00:00-05:00</updated>
    <id>http://gaslight.github.com/octopress-blog/blog/2012/12/13/gaslight-podcast-7-software-project-guidance-with-doug-alcorn&#8212;part-2</id>
    <content type="html"><![CDATA[<ul><li><a href="https://s3.amazonaws.com/gaslight-podcasts/gaslight-podcast-007.mp3" rel="enclosure">Direct download</a></li>
<li><a href="https://itunes.apple.com/us/podcast/gaslight-software-blog/id563643631">Subscribe with iTunes</a></li>
<li><a href="http://feeds.feedburner.com/gaslightpodcast">Subscribe with RSS</a></li>
</ul><p><span>In this episode, Kevin and I continue our conversation on project guidance with Doug Alcorn.  We talk about different approaches to dividing up work and the factors that make certain projects more successful than others.</span></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[It’s all the Gaslighters!]]></title>
    <link href="http://gaslight.github.com/octopress-blog/blog/2012/12/12/its-all-the-gaslighters/"/>
    <updated>2012-12-12T00:00:00-05:00</updated>
    <id>http://gaslight.github.com/octopress-blog/blog/2012/12/12/its-all-the-gaslighters</id>
    <content type="html"><![CDATA[<img src="http://25.media.tumblr.com/68156ec92379618415f1cec46c0defcb/tumblr_mexme7TBrf1qlk81uo1_400.gif"/>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Portrait of the Artist - Tammy Gambrel]]></title>
    <link href="http://gaslight.github.com/octopress-blog/blog/2012/12/07/portrait-of-the-artist---tammy-gambrel/"/>
    <updated>2012-12-07T00:00:00-05:00</updated>
    <id>http://gaslight.github.com/octopress-blog/blog/2012/12/07/portrait-of-the-artist&#8212;tammy-gambrel</id>
    <content type="html"><![CDATA[<div class="group" style="margin-bottom: 20px">
<a href="http://media.tumblr.com/tumblr_me9nqpZlcP1r9fv8b.png">
<img style="float:left; margin-right: 20px" src="http://media.tumblr.com/tumblr_me9nptT7vi1r9fv8b.png"/></a>
<p>
We were all pretty impressed when our &#8220;Artist in Residence&#8221;, Tammy Gambrel, showed off the work she had been doing with <a href="https://itunes.apple.com/us/app/sketchbook-pro-for-ipad/id364253478?mt=8">Sketchbook Pro</a> on her iPad. I met Tammy some years ago, but I had never gotten an idea of the depth of her experience, and her diversity of her talents until I sat down with her recently.
</p>

<p>
Tammy received degrees in Fine Art and Art History, but ironically, she got her foot in the door of the elusive world of professional art by taking a job as a&#8230;stock trader! It led to an accounting job at the Cincinnati Contemporary Arts Center, where she quickly climbed the ranks to planning and hosting fundraising events. It was at the CAC that she met the people who gave her the inspiration to open her own gallery called Pivot, where artists such as herself could gain the exposure they desperately needed. Because first and foremost, Tammy has been a legitimate painter who&#8217;s held solo shows at prestigious galleries like the Carnegie in Covington, and sold work to the likes of Courtney Love.
</p>

<p>
Although Tammy&#8217;s exploits in the art world were comparatively successful, living as an artist is hard for all but a very slim percentage of people. After being out of the art world for a bit, Tammy is really excited about the prospect of being creative again at Gaslight. She is experimenting with ways that she can bring a painter&#8217;s eye and skill set to the historically geometric world of the web.
</p> 

<p>
Honestly, it&#8217;s been a bit of a culture shock. She still finds herself cringing sightly at words like &#8220;slicing&#8221;, and is still a little leery of practices the web world takes for granted. Repurposing photos pulled from the web at large, for example.
</p>

<p>
Although she had been a little dismissive about mixing art and multimedia, her experiences at the CAC were eye-opening. It was there she was able to get the first-hand perspective of digital artists, and she found that they had some legitimately interesting ideas about creating in digital spaces. She is finding some major plusses to working with digital tools. Not spending three weeks layering oil paints and waiting for them to dry is nice! She can knock out a portrait in a couple hours now. And who doesn&#8217;t love &#8220;Undo&#8221;?
</p>

<p>
We just like and having Tammy around. Just look at the portraits she did of <a href="http://">@cdmwebs</a>&#8217;s boys. Cute as a button!
</p>
</div>

<div class="group" style="margin-bottom: 20px">
<a href="http://media.tumblr.com/tumblr_meo1nsbM5O1r9fv8b.png">
<img src="http://media.tumblr.com/tumblr_meo289gRFW1r9fv8b.png"/></a>
<a href="http://media.tumblr.com/tumblr_meo1lrp9bB1r9fv8b.png">
<img style="float:left; margin-right: 20px" src="http://media.tumblr.com/tumblr_meo27ckvLr1r9fv8b.png"/></a>
</div>

<div class="group" style="margin-bottom: 20px">
<a href="http://media.tumblr.com/tumblr_me9nruSkp61r9fv8b.png">
<img style="float:left; margin-right: 20px" src="http://media.tumblr.com/tumblr_me9qwlvpjf1r9fv8b.png"/></a>
<a href="http://media.tumblr.com/tumblr_me9nsbRFun1r9fv8b.png">
<img src="http://media.tumblr.com/tumblr_me9ns3AuhG1r9fv8b.png"/></a>
</div>

<div class="group">
<a href="http://media.tumblr.com/tumblr_me9nsuauJz1r9fv8b.png">
<img style="float:left; margin-right: 20px" src="http://media.tumblr.com/tumblr_me9qxzU0QA1r9fv8b.png"/></a>
<a href="http://media.tumblr.com/tumblr_me9ntdnwKV1r9fv8b.png">
<img src="http://media.tumblr.com/tumblr_me9nt3EB3j1r9fv8b.png"/></a>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Local Libraries with CocoaPods]]></title>
    <link href="http://gaslight.github.com/octopress-blog/blog/2012/11/30/using-local-libraries-with-cocoapods/"/>
    <updated>2012-11-30T00:00:00-05:00</updated>
    <id>http://gaslight.github.com/octopress-blog/blog/2012/11/30/using-local-libraries-with-cocoapods</id>
    <content type="html"><![CDATA[<p><img src="http://media.tumblr.com/tumblr_meb68rJMHl1r9fv8b.png" width="100%"/></p>

<p>We&#8217;re big fans of <a href="http://cocoapods.org">CocoaPods</a> here at Gaslight. We like having <a href="http://blog.gaslight.co/2012/08/23/cocoapods-and-you-a-primer-for-the-uninformed.html">dependencies managed for us</a>, <a href="http://blog.gaslight.co/2012/08/23/cocoapods-and-you-a-primer-for-the-uninformed.html">source fetched</a> and <a href="http://blog.gaslight.co/2012/08/23/cocoapods-and-you-a-primer-for-the-uninformed.html">compiler and linker flags set automatically</a>.</p>

<p>We&#8217;ve been using a proprietary library called <a href="http://sensiblecocoa.com/overview/">SensibleTableView</a> for building out TableViews quickly in our project. Since it&#8217;s proprietary, we can&#8217;t just give Cocoapods a podspec and fetch it automatically, but I didn&#8217;t want our project cluttered with dependencies. So, here&#8217;s how we made it work.</p>

<h2>Enter Local Podspecs</h2>

<p>CocoaPods allows the use of <a href="https://github.com/CocoaPods/CocoaPods/issues/178">local podspecs</a>. That means you can use a local path to a directory on your computer and write a Podspec in that directory and use CocoaPods just like you&#8217;d expect. Here&#8217;s what our Podfile looks like:</p>

<pre><code data-language="ruby">platform :ios, '5.1'
inhibit_all_warnings!

pod 'SensibleTableView', :local =&gt; "vendor/frameworks/STV 3.1.3 Pro/Source Code/SensibleTableView/"
pod 'STV+CoreData', :local =&gt; "vendor/frameworks/STV 3.1.3 Pro/Source Code/STV+CoreData/"
</code></pre>

<p>Of note, <code>inhibit_all_warnings!</code> is a pretty handy little setting to hide all the noise in libraries you&#8217;re using from CocoaPods. It&#8217;s nice to remove a bit of noise you don&#8217;t need to focus on at the moment.</p>

<p>Here&#8217;s the Podspec for SensibleTableView:</p>

<pre><code data-language="ruby">Pod::Spec.new do |s|
  s.name = 'SensibleTableView'
  s.version = '3.1.3'
  s.platform = :ios
  s.ios.deployment_target = '5.0'
  s.prefix_header_file = 'SensibleTableView/SensibleTableView-Prefix.pch'
  s.source_files = 'SensibleTableView/STV-Core/*.{h,m}'
  s.requires_arc = true
end
</code></pre>

<p>It&#8217;s path is <code>vendor/frameworks/STV 3.1.3 Pro/Source Code/SensibleTableView/SensibleTableView.podspec</code>, if you&#8217;re wondering.</p>

<p>That&#8217;s it. Cocoapods is great and you should be using it, too.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gaslight Podcast #6: Software Project Guidance with Doug Alcorn - Part 1]]></title>
    <link href="http://gaslight.github.com/octopress-blog/blog/2012/11/29/gaslight-podcast-6-software-project-guidance-with-doug-alcorn---part-1/"/>
    <updated>2012-11-29T00:00:00-05:00</updated>
    <id>http://gaslight.github.com/octopress-blog/blog/2012/11/29/gaslight-podcast-6-software-project-guidance-with-doug-alcorn&#8212;part-1</id>
    <content type="html"><![CDATA[<ul><li><a href="https://s3.amazonaws.com/gaslight-podcasts/gaslight-podcast-006.mp3" rel="enclosure">Direct download</a></li>
<li><a href="https://itunes.apple.com/us/podcast/gaslight-software-blog/id563643631">Subscribe with iTunes</a></li>
<li><a href="http://feeds.feedburner.com/gaslightpodcast">Subscribe with RSS</a></li>
</ul><p>We sat down with Doug Alcorn to talk about software project&#8230; guidance? This week we dive head on into a discussion of what it takes to have a successful software project. We had such a good time riding the rapids and turning it up to 11 that we made this a two part series.</p>
<ul><li>Jeff Paton&#8217;s Company - <a href="http://comakewith.us">comakewith.us</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Case for CoffeeScript]]></title>
    <link href="http://gaslight.github.com/octopress-blog/blog/2012/11/16/a-case-for-coffeescript/"/>
    <updated>2012-11-16T00:00:00-05:00</updated>
    <id>http://gaslight.github.com/octopress-blog/blog/2012/11/16/a-case-for-coffeescript</id>
    <content type="html"><![CDATA[<p><img src="http://media.tumblr.com/tumblr_mdl8g9UIDY1r9fv8b.png" width="100%"/></p>



<h1>A Case for CoffeeScript</h1>

<p></p>

<p>I’ve been writing JavaScript applications for the past few years. I’ve spent a lot of time learning JavaScript, and I’ve established a pretty solid development work-flow. We use <a href="http://coffeescript.org/">CoffeeScript</a> here at Gaslight, so when I came on-board, I was not at all excited to switch. I’ve spent the past few months in CoffeeScript, I can honestly say that I was wrong. I think CoffeeScript is great and here’s why:</p>



<h3>Beauty</h3>

<p></p>

<p>I hate to admit it, but JavaScript is just plain ugly. It’s not so much the brackets, parens and semicolons that bother me. It’s that I have to type things like <code>function(){}</code> and <code>var that = this</code> all over the place. I didn’t notice it so much when I was writing JavaScript, but now when I switch back, it bugs the crap out of me. CoffeeScript is expressive. It&#8217;s loops, comprehensions, splats and string interpolation are much cleaner than the javascript counterparts. Using CoffeeScript, I can easily write code that reads well. I found that very difficult to do in JavaScript.</p>



<h3>Whitespace</h3>

<p></p>

<p>This had been one of my biggest perceived qualms with the CoffeeScript syntax. I’ve never liked significant whitespace in languages. In reality, I didn’t find it to be a problem. I’m really OCD, so I can’t stand reading code that isn’t properly indented. With JavaScript, I spent a lot of time making sure that my code was well-styled. CoffeeScript takes some of that away by ensuring that my indentation is correct. I’ve also found that CoffeeScript is pretty liberal with its syntax. Things like object literals, loops and conditionals can be put on one line or multiple.</p>



<h3>Debugging</h3>

<p></p>

<p>I spend a lot of time in the Chrome debugger, so the thought of stepping through code that I didn’t write was a real concern. That ended up not really bothering me. The best thing about CoffeeScript is that it’s nearly one-to-one with JavaScript. I can step through the debugger and know exactly where everything came from, and it’s rare that I get confused about the translation. With source maps soon to be released, this won’t be a problem at all.</p>



<h3>Linting</h3>

<p></p>

<p>When I was writing JavaScript, I always ran my code through a linter. With CoffeeScript, I don’t need to. I know that the compiled JS will always be valid. It protects me from those JS got-cha’s like forgetting to put <code>var</code> or missing a trailing comma on a object literal.</p>



<h2>The Downside</h2>

<p></p>

<p>CoffeeScript is great, but it’s not all unicorns and rainbows. The biggest headache is setting up the compile step. A lot of Ruby people start a Javascript project with Rails just to get this for free with the asset pipeline. Most people still have to set up the workflow themselves. <a href="https://github.com/rockwood/grunt-coffeepot">Grunt Coffeepot</a> is a Grunt project I’ve been working on to serve compiled CoffeeScript on-demand.</p>



<p>It’s also a pain when you need to convert someone else’s JavaScript into CoffeeScript. I’m hoping that things like this will get easier as the tooling matures. The CoffeeScript language is still young, and there’s a lot that more that can be done to make the workflow easier.</p>



<h3>Yay, now I don’t have to learn JavaScript!</h3>

<p></p>

<p>NO! CoffeeScript is an enhancement, not an alternative. It helps to have have an understanding of JavaScript before switching to CoffeeScript. For example, if you’re going to use CoffeeScript classes, you should take the time to really understand Javascript’s prototypal inheritance. Sometimes it makes more sense not to use classes, and it’s good to have the basic understanding of native JavaScript so that you have options. Things like the <code>extends</code> operator, and CoffeeScripts’s list comprehensions are doing some really crazy stuff behind the scenes that you should be aware of. Coffeescript won’t write good code for you. That’s your job.</p>



<h2>Try it!</h2>

<p></p>

<p>I was once a CoffeeScript hater, but these past few months have changed that. JavaScript pre-compilers are getting more and more popular, and CoffeeScript is just one the many out there. As the tooling for these pre-compilers matures, more developers will adopt them. Even if you cringe at the idea of pre-compiled JavaScript, it’s worth giving it a try.</p>



<hr><p><a href="http://training.gaslight.co/workshops/3-2012-december-san-francisco-beautiful-front-end-code"><img height="15%" src="http://media.tumblr.com/tumblr_mdl903ZYC41r9fv8b.png" width="15%"/></a> Gaslighters Chris Nelson and Kevin Rockwood will be holding a San Francisco instance of their <a href="http://training.gaslight.co/workshops/3-2012-december-san-francisco-beautiful-front-end-code">Mastering Backbone</a> training course on Dec 3 - 5. Check it out!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gaslight Podcast #5: Jim Weirich on Rake, Staying Sharp, and Testing]]></title>
    <link href="http://gaslight.github.com/octopress-blog/blog/2012/11/15/gaslight-podcast-5-jim-weirich-on-rake-staying-sharp-and-testing/"/>
    <updated>2012-11-15T00:00:00-05:00</updated>
    <id>http://gaslight.github.com/octopress-blog/blog/2012/11/15/gaslight-podcast-5-jim-weirich-on-rake-staying-sharp-and-testing</id>
    <content type="html"><![CDATA[<ul><li><a href="https://s3.amazonaws.com/gaslight-podcasts/gaslight-podcast-005.mp3" rel="enclosure">Direct download</a></li>
<li><a href="https://itunes.apple.com/us/podcast/gaslight-software-blog/id563643631">Subscribe with iTunes</a></li>
<li><a href="http://feeds.feedburner.com/gaslightpodcast">Subscribe with RSS</a></li>
</ul><p>This week we spoke with Cincinnati local Jim Weirich about the new version of Rake, how he keeps learning, and the case for different kinds of testing.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Intro to JavaScript Game Development]]></title>
    <link href="http://gaslight.github.com/octopress-blog/blog/2012/11/13/intro-to-javascript-game-development/"/>
    <updated>2012-11-13T00:00:00-05:00</updated>
    <id>http://gaslight.github.com/octopress-blog/blog/2012/11/13/intro-to-javascript-game-development</id>
    <content type="html"><![CDATA[<p><img src="http://media.tumblr.com/tumblr_mdfocnbzVo1r9fv8b.png" style="width:100%"/></p>

<p>It&#8217;s probably not surprising that many of us Gaslighters would consider ourselves gamers. In fact, as I write this, I&#8217;m over-hearing <a href="https://twitter.com/dougalcorn">@dougalcorn</a> and <a href="https://twitter.com/st23am">@st23am</a> standing at the coffee machine, sharing their weekend &#8220;Eve Online&#8221; exploits. As such, it was our great pleasure to provide a home for a couple of aspiring young game developers this Summer. If <a href="http://buy.indiegamethemovie.com/">&#8220;Indie Game: The Movie&#8221;</a> and this brave new world of the internet has taught us anything, it&#8217;s that game development and publishing are no longer confined to the realm of big budget studios. The tools and channels are available to those with the urge to create.</p>

<p>One of our guests, Vincent Wilson, will be presenting at this week&#8217;s <a href="http://cincijs.com">CinciJs</a> group here at Gaslight. He was kind enough to write up some of his experiences, cutting his teeth on a popular JavaScript game development framework.</p>

<hr><p>Hello, my name is Vincent Wilson and I am a sixteen year old who is highly interested in software development. I have loved to program ever since I discovered the art around the age of 11. I have been acquiring skill in Python, Java, Javascript, Ruby, HTML and CSS since that time.</p>

<p>This summer I worked with Josh Alcorn on creating &#8220;The Inferno&#8221;, a platformer game in the theme of Dante’s Inferno. Over a period of around two weeks, Josh and I met up five times at Gaslight to develop the game (or at least part of it). The work was done using <a href="http://impactjs.com/">Impact.js</a>, a Javascript/HTML5 Canvas Game Engine.</p>

<p>To begin the project, we took examples out of Jesse Freeman’s book, <a href="http://www.amazon.com/Introducing-HTML5-Development-Jesse-Freeman/dp/1449315178">Introducing HTML5 Game Development</a>.  Using the ideas contained within the book, we constructed a simple class that managed the movement of the player, including running and jumping as well as a little bug testing feature / Easter egg, flying (if you are curious, trying pressing F, L, and Y all at the same time while the canvas is in focus).  I completed most of this while Josh began work on the graphics for the levels we planned to create.</p>

<p>Over lunch on the first day we decided that we wished to create, in episodes, the nine layers of Dante’s Inferno. We began on the first ring, limbo.</p>

<p><img src="http://media.tumblr.com/tumblr_mdfohpPLf61r9fv8b.png" style="width:100%"/></p>

<p>Impact.js contains a tile based level editor that makes creating levels as simple as creating the assets, importing the assets into the level editor (entitled Weltmeister), and then dragging to paint tiles. You can paint collision tiles to define the collision, as well as placing entities that have independent .js files into the level.</p>

<p>Impact.js has a fairly robust physics and collision system built into the game. Physics are handled simply, and moving is accomplished, at least within our game, by simply setting an acceleration for the player in the player class&#8217;s update function while a key is held down, and then setting the velocity to zero when no keys are held down.</p>

<p>By overriding the engine&#8217;s &#8220;check&#8221; class it is possible to modify what happens when two entities collide. Each entity has a built in check class (which manages collision) and a kill class (which is called either manually or when an entity has taken a set amount of &#8220;damage&#8221;). In the example of the spikes which can be found throughout the planes of limbo, there is a trigger entity, which when touched by the player, calls a hurt entity, which then deals a configurable amount of damage to the entity that collided with the trigger. By overriding the player&#8217;s kill class, I was able to spawn a few bloody chunk entities (subclassed from a particle entity) which are designed to fade away after a set amount of time.</p>

<p>We decided to make a platformer because of my previous experiences with similar games, but Impact.js is a very capable engine.  The applications that can be created with it are nearly limited only by your imagination. Among the games developed with Impact, I have seen dungeon crawlers, role playing games, shoot em ups, pong look-alikes, and Tetris clones.</p>

<p>Along the way I learned about several important topics, the most prominent being:</p>

<ul><li><p>Scope creep: Josh and I began with a simple idea; create a fun and functional level in Impact.js. As work on the project continued, the scope began to creep up on us. Fairly soon we had plans for features such as wall climbing and bouncy blocks and several other features which we didn’t have the time to implement. This led to a situation where we spread out our energy over an area that was too large, allowing us to accomplish little compared to focusing our energy on areas that we could complete.</p></li>
<li><p>The importance of version control in a multi-person project. I have used version control in the past, but it was only after this project that I began to realize the real advantages of using it. We began by using Dropbox to manage inter-computer file exchange but quickly stopped using that in exchange for git because of Dropbox’s inability to efficiently handle file conflicts. Using git along with Github we had no issues managing the files for the project with ease.</p></li>
</ul><p>My time at Gaslight was time well spent. I would be speaking for both Josh and myself if I stated that I readily enjoyed my time, and I very much wish to continue to work in the software development field. You can view what we completed at:
<a href="http://le-server.com/inferno/">http://le-server.com/inferno/</a></p>

<p>You can view some of my more recent work with Impact.js here:
<a href="http://le-server.com/linetime/">http://le-server.com/linetime/</a>&#8221;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Post GiveCamp reflections]]></title>
    <link href="http://gaslight.github.com/octopress-blog/blog/2012/11/02/post-givecamp-reflections/"/>
    <updated>2012-11-02T00:00:00-04:00</updated>
    <id>http://gaslight.github.com/octopress-blog/blog/2012/11/02/post-givecamp-reflections</id>
    <content type="html"><![CDATA[<p><img src="http://media.tumblr.com/tumblr_mcveyu6h4J1r9fv8b.png" style="width:100%"/></p>

<p class="p1">GiveCamp this year was a great opportunity and I had an awesome time. Taking a weekend out and focusing on giving back to charities that are making a difference in peoples lives and communities felt really good. Also I got to hang out with some great people.</p>



<p class="p1">Our charity CUFA (Communities United for Action) came to us in need of a way for people to report on properties that have become problems in their community.</p>



<p class="p1">The app (<a href="http://cufacincy.heroku.com/"><span class="s1"><a href="http://cufacincy.heroku.com"><a href="http://cufacincy.heroku.com">http://cufacincy.heroku.com</a></a></span></a>) that we built to help out with this problem was in concept pretty simple. It allowed a person to report a house by address for various problems such as high grass, overgrown bushes, and broken windows to CUFA who then can report the property to the correct authorities for a municipality. It also allowed CUFA to provide the user with some helpful contact info for local representatives for that municipality who could assist them.</p>



<p class="p1">Over the weekend (Friday, Saturday and Sunday) we set out to build this application and along the way I feel like it reaffirmed a lot of what I have learned about writing software.</p>



<p class="p1">The first thing it reaffirmed was the value of a good team. This year our team largely consisted of people from here at Gaslight. Don’t get me wrong I love working with new people and getting a chance to pair with other developers. However, with the short time frame it was really nice to have a team behind me that I was used to working with and I knew how to collaborate with. Also having the support of two of our very talented designers Ryan Arthur and Kristin Lasita was a huge boon. One of the skills that was in high demand the entire weekend was that of good designers. I would love to see more designers get involved next year!</p>

<p>

<img width="100%" src="http://media.tumblr.com/tumblr_mcvf1aNWvT1r9fv8b.jpg"/></p>

<p class="p1">Second something that is true for any software project; Having direct timely access and feedback to and from your client / product owner is vital! With just the weekend to deliver it was a huge win for the project that our charity was available most of the day for all three days. At times I felt bad because we spent a lot of our time with our heads down in our laptops or lost in the back and forth discussion that is involved in pairing but, whenever we ran into issues or questions about a feature Kevin or Mary from CUFA was there to help us. Their help was invaluable and we could not have delivered without them. Huge thanks goes out to Kevin and Mary for sticking it out with us.</p>



<p class="p1">Another thing that struck me was the value of up front planning and the conversations that were had prior to GiveCamp. Thanks goes out to CUFA, Bill Barnett, and Chris Moore from Gaslight. Pairing down, prioritizing and taking the time to write stories ahead of time was essential. Knowing and having confidence as well as understanding the value of what you are working on is always critical to the success of a project. <a href="http://cukes.info/">Cucumber</a> stories and <a href="https://trello.com/">Trello</a> really shined here and allowed us to move and execute quickly.</p>



<p class="p1">The fourth thing that was reaffirmed to me was not matter how well you plan or how much you have thought a problem out; software is hard and there is always something you did not plan for. In our case we relied on certain geocoding data from Google that was not as consistent as we had hoped. Despite problems and at times feeling like we may have bit off more than we could chew we were able to deliver on the core of what CUFA had asked us for. That felt really good.</p>

<p>

<img width="100%" src="http://media.tumblr.com/tumblr_mcvf7p7v3F1r9fv8b.jpg"/></p>

<p>I was proud of our team and all of the other teams at GiveCamp. There were tons of success stories like ours over the weekend and a lot of awesome charities benefited. I met so many passionate, smart and caring people this year and the energy in the rooms over the weekend was high and infectious even into the late evenings. The entire support team of GiveCamp did an excellent job keeping team leaders on and focused with regular standups about every hour and made sure people got help whenever they needed it. There was around the clock snacks, meals and support and I cannot thank them enough for the wonderful job they did. I can’t wait to see what GiveCamp can accomplish next year!!</p>
]]></content>
  </entry>
  
</feed>
